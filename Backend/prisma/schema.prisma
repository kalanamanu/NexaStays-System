generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
  Prisma schema with Review model removed as requested.
  Removed:
  - Review model
  - User.reviews field
  - Hotel.reviews field

  After saving this file run the migration and regenerate the client:
    npx prisma migrate dev --name add-hotel-id-to-block-booking
    npx prisma generate
*/

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String
  role                 String // "customer" or "travel-company"
  customerProfile      CustomerProfile? // one-to-one optional
  travelCompanyProfile TravelCompanyProfile? // one-to-one optional
  createdAt            DateTime              @default(now())
}

model CustomerProfile {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  phone        String
  country      String
  nic          String
  birthDay     DateTime
  address      String
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  reservations Reservation[]
}

model TravelCompanyProfile {
  id            Int            @id @default(autoincrement())
  companyName   String
  companyRegNo  String
  phone         String
  country       String
  address       String
  user          User           @relation(fields: [userId], references: [id])
  userId        Int            @unique
  blockBookings BlockBooking[]

  // travel companies can own/manage hotels
  hotels        Hotel[]        // one-to-many
}

model BlockBooking {
  id              Int                  @id @default(autoincrement())
  travelCompany   TravelCompanyProfile @relation(fields: [travelCompanyId], references: [id])
  travelCompanyId Int

  hotel           Hotel?               @relation(fields: [hotelId], references: [id])
  hotelId         Int?

  roomTypes       BlockBookingRoomType[] // <-- NEW

  arrivalDate     DateTime
  departureDate   DateTime
  discountRate    Float
  totalAmount     Float
  status          String
  createdAt       DateTime             @default(now())
}

model BlockBookingRoomType {
  id            Int          @id @default(autoincrement())
  blockBooking  BlockBooking @relation(fields: [blockBookingId], references: [id])
  blockBookingId Int
  roomType      String
  rooms         Int
}

/*
  Hotel model: extended with details for the hotel details page
  (reviews removed per request)

  Added startingPrice field to store the hotel's displayed "From" / starting price.
  You can keep this in sync with room prices (min(room.pricePerNight)) via a backfill
  or whenever rooms change.
*/
model Hotel {
  id              Int         @id @default(autoincrement())
  name            String
  slug            String      @unique
  description     String?
  address         String?
  postalCode      String?
  neighborhood    String?
  city            String?
  country         String?
  latitude        Float?
  longitude       Float?
  starRating      Float?      // e.g. 4.5
  ratingCount     Int         @default(0)
  amenities       String[]    @default([]) // ["wifi","pool","gym"]
  images          String[]    @default([]) // URLs to images
  phone           String?
  email           String?
  website         String?
  policies        String[]    @default([]) // hotel policies, e.g. ["no-smoking","pet-friendly"]
  checkInTime     String?     // stored as "14:00" or human friendly string
  checkOutTime    String?     // stored as "11:00"
  currency        String?     @default("USD")
  tags            String[]    @default([]) // ["family","beachfront"]
  isPublished     Boolean     @default(true)
  travelCompany   TravelCompanyProfile? @relation(fields: [travelCompanyId], references: [id])
  travelCompanyId Int?

  // Starting price shown on listings (e.g. "From $199")
  // Keep in sync with the minimum pricePerNight among the hotel's rooms.
  startingPrice   Float       @default(0.0)

  rooms           Room[]
  reservations    Reservation[]
  blockBookings   BlockBooking[]  // NEW: reverse relation

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Self-referencing many-to-many to represent "related" hotels or "you might also like"
  relatedHotels   Hotel[]     @relation("HotelRelated")
  relatedByHotels Hotel[]     @relation("HotelRelated")
}

model Room {
  id            Int           @id @default(autoincrement())
  // room number (not globally unique; unique per-hotel via @@unique)
  number        String
  type          String
  status        String // "available" | "occupied" | "maintenance"
  pricePerNight Float         @default(120.0)

  // relation to Hotel
  hotel         Hotel?        @relation(fields: [hotelId], references: [id])
  hotelId       Int?

  reservations  Reservation[] @relation("RoomReservations")
  createdAt     DateTime      @default(now())

  @@unique([hotelId, number])
}

model Reservation {
  id         Int              @id @default(autoincrement())

  // Optional, used for customer dashboard only
  customer   CustomerProfile? @relation(fields: [customerId], references: [id])
  customerId Int?

  // Guest details for clerk/phone reservations
  guestName  String?
  guestPhone String?
  guestEmail String?

  // Room relation and info
  roomId     Int? // Foreign key to Room, used for all reservations
  room       Room?   @relation("RoomReservations", fields: [roomId], references: [id])
  roomType   String
  roomNumber String? // For display/search only, not a relation

  // link reservation to hotel (helps reports, pages)
  hotel       Hotel? @relation(fields: [hotelId], references: [id])
  hotelId     Int?

  arrivalDate     DateTime
  departureDate   DateTime?
  guests          Int
  totalAmount     Float
  status          String // "checked-in", "reserved", etc.
  paymentIntentId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  billingRecord   BillingRecord?

  // Auto-cancel and notification fields
  cancelledAt         DateTime?
  cancellationReason  String?
  customerNotified    Boolean      @default(false)
}

model BillingRecord {
  id            Int         @id @default(autoincrement())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int         @unique
  roomCharges   Float
  restaurant    Float
  roomService   Float
  laundry       Float
  telephone     Float
  club          Float
  other         Float
  lateCheckout  Float
  total         Float
  createdAt     DateTime    @default(now())
}