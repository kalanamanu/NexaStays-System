generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String
  role                 String // "customer" or "travel-company"
  customerProfile      CustomerProfile? // one-to-one optional
  travelCompanyProfile TravelCompanyProfile? // one-to-one optional
  createdAt            DateTime              @default(now())
}

model CustomerProfile {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  phone        String
  country      String
  nic          String
  birthDay     DateTime
  address      String
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  reservations Reservation[]
}

model TravelCompanyProfile {
  id            Int            @id @default(autoincrement())
  companyName   String
  companyRegNo  String
  phone         String
  country       String
  address       String
  user          User           @relation(fields: [userId], references: [id])
  userId        Int            @unique
  blockBookings BlockBooking[]
}

model BlockBooking {
  id              Int                  @id @default(autoincrement())
  travelCompany   TravelCompanyProfile @relation(fields: [travelCompanyId], references: [id])
  travelCompanyId Int
  rooms           Int
  roomType        String
  arrivalDate     DateTime
  departureDate   DateTime
  discountRate    Float
  totalAmount     Float
  status          String
  createdAt       DateTime             @default(now())
}

model Room {
  id            Int           @id @default(autoincrement())
  number        String        @unique
  type          String
  status        String // "available" | "occupied" | "maintenance"
  pricePerNight Float         @default(120.0)
  reservations  Reservation[] @relation("RoomReservations")
}

model Reservation {
  id         Int              @id @default(autoincrement())
  // Optional, used for customer dashboard only
  customer   CustomerProfile? @relation(fields: [customerId], references: [id])
  customerId Int?

  // Guest details for clerk/phone reservations
  guestName  String?
  guestPhone String?
  guestEmail String?

  // Room relation and info
  roomId     Int? // Foreign key to Room, used for all reservations
  room       Room?   @relation("RoomReservations", fields: [roomId], references: [id])
  roomType   String
  roomNumber String? // For display/search only, not a relation

  arrivalDate     DateTime
  departureDate   DateTime?
  guests          Int
  totalAmount     Float
  status          String // "checked-in", "reserved", etc.
  paymentIntentId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  billingRecord   BillingRecord?
}

model BillingRecord {
  id            Int         @id @default(autoincrement())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int         @unique
  roomCharges   Float
  restaurant    Float
  roomService   Float
  laundry       Float
  telephone     Float
  club          Float
  other         Float
  lateCheckout  Float
  total         Float
  createdAt     DateTime    @default(now())
}
